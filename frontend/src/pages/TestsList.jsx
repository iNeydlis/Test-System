import React, { useState, useEffect, useContext } from 'react';
import { Link } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';
import TestService from '../services/TestService';
import './TestsList.css'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª

const TestsList = () => {
    const [tests, setTests] = useState([]); // Initialize with empty array
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const { user } = useContext(AuthContext);

    useEffect(() => {
        fetchTests();
    }, []);

    const fetchTests = async () => {
        try {
            setLoading(true);
            const response = await TestService.getAllTests();
            // The response is already the data due to your API interceptor
            setTests(Array.isArray(response) ? response : []);
        } catch (err) {
            console.error("Error fetching tests:", err);
            setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤: " + (err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'));
            setTests([]); // Ensure tests is always an array
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteTest = async (testId) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç?')) {
            try {
                await TestService.deleteTest(testId);
                // Update the local state to reflect the change
                setTests(prevTests =>
                    prevTests.map(test =>
                        test.id === testId
                            ? { ...test, active: false }
                            : test
                    )
                );
            } catch (err) {
                console.error("Error deactivating test:", err);
                setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: " + (err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'));
            }
        }
    };

    // New method for permanent deletion
    const handlePermanentDeleteTest = async (testId) => {
        if (window.confirm('–í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ü–û–õ–ù–û–°–¢–¨–Æ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
            try {
                await TestService.permanentlyDeleteTest(testId);
                // Remove the test from the list
                setTests(prevTests => prevTests.filter(test => test.id !== testId));
            } catch (err) {
                console.error("Error permanently deleting test:", err);
                setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: " + (err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'));
            }
        }
    };

    const handleReactivateTest = async (testId, clearAttempts) => {
        const confirmMessage = clearAttempts
            ? '–í—ã —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'
            : '–í—ã —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç?';

        if (window.confirm(confirmMessage)) {
            try {
                await TestService.reactivateTest(testId, clearAttempts);
                // Refresh the tests list
                fetchTests();
            } catch (err) {
                console.error("Error reactivating test:", err);
                setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: " + (err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'));
            }
        }
    };

    const handleViewReferenceMaterials = async (testId) => {
        try {
            await TestService.viewReferenceMaterials(testId);
        } catch (err) {
            console.error("Error viewing reference materials:", err);
            setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: " + (err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'));
        }
    };

    // Add defensive programming - ensure tests is always treated as an array
    const renderTests = () => {
        const testsArray = Array.isArray(tests) ? tests : [];

        if (testsArray.length === 0) {
            return <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.</p>;
        }

        // Group tests by active status for teachers and admins
        if (user?.role === 'TEACHER' || user?.role === 'ADMIN') {
            const activeTests = testsArray.filter(test => test.active !== false);
            const inactiveTests = testsArray.filter(test => test.active === false);

            return (
                <>
                    <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã</h3>
                    {activeTests.length > 0 ? (
                        <div className="tests-grid tests-container">
                            {activeTests.map(test => renderTestCard(test))}
                        </div>
                    ) : (
                        <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.</p>
                    )}

                    <h3>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã</h3>
                    {inactiveTests.length > 0 ? (
                        <div className="tests-grid">
                            {inactiveTests.map(test => renderTestCard(test))}
                        </div>
                    ) : (
                        <p>–ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.</p>
                    )}
                </>
            );
        }

        // For students, only show active tests
        return (
            <div className="tests-grid">
                {testsArray
                    .filter(test => test.active !== false)
                    .map(test => renderTestCard(test))}
            </div>
        );
    };

    const renderTestCard = (test) => {
        const isActive = test.active !== false;
        const calculatePercentage = (score, maxScore) => {
            if (!score || !maxScore) return 0;
            return Math.round((score / maxScore) * 100);
        };

        // Function to calculate grade from percentage
        const calculateGrade = (score, maxScore) => {
            const percentage = calculatePercentage(score, maxScore);

            if (percentage >= 90) return '5 (–æ—Ç–ª–∏—á–Ω–æ)';
            if (percentage >= 75) return '4 (—Ö–æ—Ä–æ—à–æ)';
            if (percentage >= 60) return '3 (—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)';
            return '2 (–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)';
        };

        // Check if test has reference materials
        const hasReferenceMaterials = test.hasReferenceMaterials || test.referenceMaterialsFilename;

        return (
            <div
                key={test.id}
                className={`test-card ${!isActive ? 'inactive' : ''}`}
            >
                <div className="card-header">
                    <h3>{test.title}</h3>
                    {!isActive && (
                        <span className="inactive-badge">
                            –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
                        </span>
                    )}
                </div>
                <p><strong>–ü—Ä–µ–¥–º–µ—Ç:</strong> {test.subjectName?.name || test.subjectName || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {test.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                <p><strong>–í–æ–ø—Ä–æ—Å–æ–≤:</strong> {(test.questionsToShow && test.questionsToShow >= 1) ? test.questionsToShow : test.questionCount || '0'}</p>
                <p><strong>–ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫:</strong> {test.maxAttempts || '1'}</p>

                {/* Display reference materials information */}
                {hasReferenceMaterials && (
                    <div className="reference-materials">
                        <div>
                            <span className="reference-title">
                                <span style={{ marginRight: '5px' }}>üìÑ</span>
                                –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                            </span>
                            {test.referenceMaterialsFilename && (
                                <div className="reference-filename">
                                    {test.referenceMaterialsFilename}
                                </div>
                            )}
                        </div>
                        <button
                            onClick={() => handleViewReferenceMaterials(test.id)}
                            className="button button-blue"
                        >
                            –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                        </button>
                    </div>
                )}

                {/* –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ */}
                {user?.role === 'STUDENT' && (
                    <div className="student-info">
                        {test.bestScore !== undefined && test.bestScore !== null && test.bestScore !== '' ? (
                            <div>
                                <p className="score-info">
                                    <strong>–û—Ü–µ–Ω–∫–∞:</strong> {calculateGrade(test.bestScore, test.maxScore)}
                                </p>
                                <p className="result-info">
                                    <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {test.bestScore} –∏–∑ {test.maxScore || test.totalPoints} –±–∞–ª–ª–æ–≤
                                    ({calculatePercentage(test.bestScore, test.maxScore)}%)
                                </p>
                            </div>
                        ) : (
                            <p className="status-info">
                                <strong>–°—Ç–∞—Ç—É—Å:</strong> –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
                            </p>
                        )}
                        {test.maxAttempts !== undefined && (
                            <p>
                                <strong>–ü–æ–ø—ã—Ç–∫–∏:</strong>{' '}
                                {test.remainingAttempts !== undefined
                                    ? `${test.maxAttempts - test.remainingAttempts} –∏–∑ ${test.maxAttempts}`
                                    : `${test.maxAttempts} –º–∞–∫—Å–∏–º—É–º`}
                            </p>
                        )}
                    </div>
                )}

                <div className="actions-container">
                    {user?.role === 'STUDENT' ? (
                        <Link
                            to={`/tests/${test.id}/take`}
                            className={`button ${test.remainingAttempts > 0 && isActive ? 'button-blue' : 'button-disabled'}`}
                            onClick={(e) => {
                                if (test.remainingAttempts <= 0 || !isActive) {
                                    e.preventDefault();
                                    const message = !isActive
                                        ? '–≠—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è'
                                        : '–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞';
                                    alert(message);
                                }
                            }}
                        >
                            {!isActive
                                ? '–¢–µ—Å—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
                                : (test.remainingAttempts > 0 ? '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' : '–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫')}
                        </Link>
                    ) : (
                        <div className="admin-buttons">
                            {isActive ? (
                                <>
                                    <Link
                                        to={`/tests/${test.id}/results`}
                                        className="button button-blue"
                                    >
                                        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                    </Link>
                                    <Link
                                        to={`/tests/${test.id}/edit`}
                                        className="button button-yellow"
                                    >
                                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </Link>
                                    <button
                                        onClick={() => handleDeleteTest(test.id)}
                                        className="button button-red"
                                    >
                                        –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                </>
                            ) : (
                                <>
                                    <Link
                                        to={`/tests/${test.id}/results`}
                                        className="button button-blue"
                                    >
                                        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                    </Link>
                                    <button
                                        onClick={() => handleReactivateTest(test.id, false)}
                                        className="button button-green"
                                    >
                                        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                    <button
                                        onClick={() => handleReactivateTest(test.id, true)}
                                        className="button button-orange"
                                    >
                                        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—á–∏—Å—Ç–∏—Ç—å
                                    </button>
                                    <button
                                        onClick={() => handlePermanentDeleteTest(test.id)}
                                        className="button button-dark-red"
                                    >
                                        –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞
                                    </button>
                                </>
                            )}
                        </div>
                    )}
                </div>
            </div>
        );
    };

    if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤...</div>;
    if (error) return <div className="error-message">{error}</div>;

    return (
        <div>
            <div className="tests-header">
                <h2>–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤</h2>
                {(user?.role === 'TEACHER' || user?.role === 'ADMIN') && (
                    <Link
                        to="/tests/create"
                        className="create-button"
                    >
                        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
                    </Link>
                )}
            </div>

            {renderTests()}
        </div>
    );
};

export default TestsList;